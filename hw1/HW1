from __future__ import division
import numpy as np
from sklearn import datasets, cross_validation
from sklearn.neighbors import KNeighborsClassifier

iris = datasets.load_iris()
iris_X = iris.data
iris_y = iris.target
np.unique(iris_y)
p = 15
np.random.seed(0)
indices = np.random.permutation(len(iris_X)) #len(iris_X) = 150
iris_X_train = iris_X[indices[:-p]]
iris_y_train = iris_y[indices[:-p]]
iris_X_test = iris_X[indices[-p:]]
iris_y_test = iris_y[indices[-p:]]

SEED = 42
n = 10
#predicted_score = 0
for k in range(0,5):
    predicted_score = 0 
    for i in range(n):
        iris_X_train, iris_X_test, iris_y_train, iris_y_test = cross_validation.train_test_split(iris_X, iris_y, test_size=0.33, random_state=i*SEED)

        knn = KNeighborsClassifier(n_neighbors=((k)+1)*3)
        knn.fit(iris_X_train, iris_y_train)

        prediction = knn.predict(iris_X_test)
         
        predicted_score += knn.score(iris_X_test, iris_y_test)
         
    print ("for k = ", ((k)+1)*3, "the accuracy is ", predicted_score / n) 
'''
         def accuracy(prediction, iris_y_test):
               diff_count = 0
               for i, j in zip(prediction, iris_y_test):
                   if i != j:
                       diff_count  +=1
               return diff_count

         print "K=",  ((k)+1)*5, str(int((1 - accuracy(prediction,\
 iris_y_test)/len(prediction))*100))+"%" + " accuracy " +  "Only " + str(accuracy(prediction, iris_y_test)) + " out of " + str(n) +  " data points were classified incorrectly "

#knn.score(iris_X_train, iris_y_train)
knn.score(iris_X_test, iris_y_test)
'''
